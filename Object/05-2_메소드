05-2 메소드 (Method)

예 1)
package Object;

public class Test {
    // 1. 입력값과 출력값이 모두 있는 메소드
    public int sum(int a, int b) {
        return a+b;
    }

    // 2. 입력값이 없고 출력값만 있는 메소드
    public String say() {
        return "Hi";
    }

    // 3. 입력값은 있고 출력값(리턴)이 없는 메소드
    public void sum2(int a, int b) {
        System.out.println(a+"과 "+b+"의 합은"+(a+b)+"입니다."); // 리턴없이 그냥 출력
    }

    // 4. 입력값과 출력값이 모두 없는 메소드
    public void say2() {
        System.out.println("Hello");
    }      

    public static void main(String[] args) {  // 시작점
        int a = 3;
        int b = 4;
        
        Test myTest = new Test();

        // 1. 입력값과 출력이 모두 있는 메소드
        int c = myTest.sum(a, b);
        System.out.println(c);

        // 2. 입력값이 없고 출력값만 있는 메소드
        String d = myTest.say();
        System.out.println(d);

        // 3. 입력값은 있고 출력값(리턴)이 없는 메소드
        myTest.sum2(3,4);

        // 4. 입력값과 출력값이 모두 없는 메소드
        myTest.say2();
    }
}

예 2) 메소드 내에서 선언된 변수의 효력 범위
package Object;

// public void vartest(int b) -> void 로컬변수 메소드 내에서만 쓰이는 변수
public class Test2 {
    public int vartest(int a) {
        a++;
        return a;
    }
    public static void main(String[] args) {
        int a = 1;

        Test2 myTest = new Test2();
        a = myTest.vartest(a);
        System.out.println(a);
    }
}


풀이 3) 
public class Test {
    int a;  // 객체변수 a

    public void vartest(Test test) {
        test.a++;
    }

    public static void main(String[] args) {
        Test myTest = new Test();
        myTest.a = 1;
        myTest.vartest(myTest);
        System.out.println(myTest.a);
    }
}


풀이 4) 
package Object;
public class Test2 {
    int a;  // 객체변수 a

    public void vartest() {
        this.a++;
    }
    public static void main(String[] args) {
        Test2 myTest = new Test2();
        myTest.a = 1;
        myTest.vartest();
        System.out.println(myTest.a);
    }
}
