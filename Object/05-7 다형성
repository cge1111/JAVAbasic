05-7 다형성

[ Bouncer.java ]
package Object;
public class Bouncer {
    public void barkAnimal(Animal animal) {
        if (animal instanceof Tiger) {  //  "animal 객체가 new Tiger로 만들어진 객체인가?" 
            System.out.println("어흥");
        } else if (animal instanceof Lion) { // instanceof 는 특정 객체가 특정 클래스의 객체인지를 조사
            System.out.println("으르렁");
        }
    }
    public static void main(String[] args) {
        Tiger tiger = new Tiger();
        Lion lion = new Lion();
        Bouncer bouncer = new Bouncer();
        bouncer.barkAnimal(tiger);
        bouncer.barkAnimal(lion);
    }
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[ Barkable.java ]
package Object;  // 다형성
public interface Barkable {  // 인터페이스작성
    public void bark();
}



[ Tiger.java ]
package Object;
public class Tiger extends Animal implements Predator,  Barkable {  // Predator 인터페이스(연결)
    public String getFood() {
        return "apple";   // 여기서 apple 구현
    }
    public String uppercase() {
        return "T";
    }
    public void bark() {
        System.out.println("어흥");
    }
}

[ Lion.java ]
package Object;
public class Lion extends Animal implements Predator,  Barkable { // Predator 인터페이스
    public String getFood() {
        return "banana"; // 여기서 banana 구현
    }
    public String uppercase() {
        return "L";
    }
    public void bark() {
        System.out.println("으르렁");
    }
}

[ Crocodile.java ]
package Object;
public class Crocodile extends Animal implements Predator,  Barkable {  // Predator 인터페이스
    public String getFood() {
        return "strawberry";  // 여기서 orange 구현
    }
    public String uppercase() {
        return "C";
    }
    public void bark() {
        System.out.println("크로옹");
    }
}


[ Bouncer.java ]
package Object;   // 다형성
public class Bouncer {
    public void barkAnimal(Barkable animal) {
        animal.bark();
     }  
    public static void main(String[] args) {
        Tiger tiger = new Tiger();
        Lion lion = new Lion();
        Crocodile corcodile = new Crocodile();
        Bouncer bouncer = new Bouncer();
        bouncer.barkAnimal(tiger);
        bouncer.barkAnimal(lion);
        bouncer.barkAnimal(corcodile);   // 어흥 으르렁 크로옹
// 폴리모피즘을 이용하면 위의 예에서 보듯이 복잡한 if else 의 조건문을 간단하게 처리할 수 있는 경우가 많다.
    }
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

[ BarkablePredator.java ]
package Object;
// 풀이1
public interface BarkablePredator {  // 두 인터페이스를 하나의 인터페이스로 구현
    public void bark();
    public String getFood();
    public String uppercase();
}

// 풀이 2
public interface BarkablePredator extends Predator, Barkable {
}
//인터페이스는 일반 클래스와는 달리 extends 를 이용하여 여러개의 인터페이스(Predator, Barkable)를 동시에 상속할 수 있다.
//  즉, 인터페이스는 다중 상속이 지원된다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[ Tiger.java ]
package Object;
public class Tiger extends Animal implements BarkablePredator {  // Predator 인터페이스(연결)
    public String getFood() {
        return "apple";   // 여기서 apple 구현
    }
    public String uppercase() {
        return "T";
    }
    public void bark() {
        System.out.println("어흥");
    }
}

[ Lion.java ]
package Object;
public class Lion extends Animal implements BarkablePredator { // Predator 인터페이스
    public String getFood() {
        return "banana"; // 여기서 banana 구현
    }
    public String uppercase() {
        return "L";
    }
    public void bark() {
        System.out.println("으르렁");
    }
}

[ Crocodile.java ]
package Object;
public class Crocodile extends Animal implements BarkablePredator {  // Predator 인터페이스
    public String getFood() {
        return "strawberry";  // 여기서 orange 구현
    }
    public String uppercase() {
        return "C";
    }
    public void bark() {
        System.out.println("크로옹");
    }
}
