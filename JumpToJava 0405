자료형, 리스트
03-2 부울 (boolean)
class Main {
  public static void main(String[] args) {
    int base = 180;
    int height = 185;
    boolean isTall = height > base;

    if (isTall) {
      System.out.println("키가 큽니다."); 
    }
    
  }
}


03-3 문자 (char)
class Main {
  public static void main(String[] args) {
    char a1 = 'a';
    char a2 = 97;
    char a3 = '\u0061';

    System.out.println(a1);
    System.out.println(a2);
    System.out.println(a3); 
    }
    
  }
  
03-5 StringBuffer
append
    StringBuffer sb = new StringBuffer();
    sb.append("Hello");
    sb.append(" ");
    sb.append("jump to java");
    System.out.println(sb.toString()); // hello jump to java

insert
insert 메소드는 특정 위치에 원하는 문자열을 삽입할 수 있다.
        StringBuffer sb = new StringBuffer();
        sb.append("jump to java");
        sb.insert(0, "hello ");
        System.out.println(sb.toString()); // hello jump to java

substring
substring 메소드는 String 자료형의 substring 메소드와 사용법이 동일하다.
        StringBuffer sb = new StringBuffer();
        sb.append("Hello jump to java");
        System.out.println(sb.substring(0, 4));
       
03-6 배열 (Array)
String[] weeks = {"월", "화", "수", "목", "금", "토", "일"};
for (int i=0; i<weeks.length; i++) {
    System.out.println(weeks[i]);
}

03-7 리스트 (List)
add
ArrayList pitches = new ArrayList();
pitches.add("138");
pitches.add("129");
pitches.add("142");
pitches.add(0, "133");    // 첫번째 위치에 133 삽입.

get
박찬호 선수의 2번째 투구 스피드를 알고 싶다면 다음과 같이 하면 된다.
System.out.println(pitches.get(1));

size
size 메소드는 ArrayList의 갯수를 리턴한다.
System.out.println(pitches.size());

contains
contains 메소드는 리스트 안에 항목값이 있는지를 판별하여 그 결과를 boolean으로 리턴한다.
System.out.println(pitches.contains("142"));

remove : 객체, 인덱스
remove(객체)의 경우는 리스트에서 객체에 해당되는 항목을 삭제하고 삭제한 결과를 리턴한다.
System.out.println(pitches.remove("129")); // true

list 최종 예제
import java.util.*;

public class TestList { // class Main
    public static void main(String[] args) {
        ArrayList<String> pitches = new ArrayList<String>();
        pitches.add("138");
        pitches.add("129");
        pitches.add("142");

        System.out.println(pitches.get(1));
        System.out.println(pitches.size());
        System.out.println(pitches.contains("142"));

        System.out.println(pitches.remove("129"));
        System.out.println(pitches.size());
        System.out.println(pitches.remove(0));
    }
}

03-8 제네릭스 (Generics) : ArrayList<String> aList = new ArrayList<String>();  ArrayList 안에 담을 수 있는 자료형은 String 타입 뿐이다
ArrayList<String> aList = new ArrayList<String>();
aList.add("hello");
aList.add("java");

String hello = aList.get(0);
String java = aList.get(1); // Object 를 String 으로 캐스팅한다. (String)
※ 여기서는 제네릭스의 타입으로 String 자료형만을 예로 들었지만 <Integer>, <Animal>, <Dog> 등 어떤 자료형도 사용할 수 있다.

03-9 맵 (Map) = 딕셔너리
put
key와 value가 String 형태인 HashMap을 만들고 위에서 보았던 예제의 항목값들을 입력해 보았다. key와 value는 위 예제에서 보듯이 put메소드를 이용하여 입력

import java.util.*; //  import 대입
class Main {
  public static void main(String[] args) {
    HashMap<String, String> map = new HashMap<String, String>();
    map.put("people","사람"); // 만들기 딕셔너리처럼
    map.put("baseball","야구"); // 집어넣기
    System.out.println(map.get("people")); // value값을 얻기alue값을 얻기
      }      
  }
 - get : key에 해당되는 value값을 얻기 위해서는 다음과 같이 한다.
System.out.println(map.get("people")); // 사람

 - containsKey :  메소드는 맵(Map)에 해당 키(key)가 있는지를 조사하여 그 결과값을 리턴한다.
System.out.println(map.containsKey("people"));  // true 출력

 - remove : 메소드는 맵(Map)의 항목을 삭제하는 메소드로 key값에 해당되는 아이템(key, value)을 삭제한 후 그 value 값을 리턴한다.
System.out.println(map.remove("people"));  // 아이템(people:사람)이 삭제된 후 "사람" 출력

 - size : 메소드는 Map의 갯수를 리턴한다.
System.out.println(map.size());  // 1
  

